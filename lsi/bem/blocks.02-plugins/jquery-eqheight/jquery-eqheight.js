// Generated by CoffeeScript 1.6.3
/*
 jQuery eqHeight responsive Bootstrap plugin by Shkarupa Alex (shkarupa.alex@gmail.com)

 Usage
 Via data attributes
 To easily add equal height behavior to columns, add data-height="equal" to the parent elemen. All nested children will become equal height.
 <div data-height="equal">
 <div>
 ...
 </div>

 <div>
 ...
 </div>
 </div>

 You can also point more specific elements as target. In next example just to "p" items will become same height.
 <div data-height="equal" data-target=".someclass p.eq">
 <div class="someclass">
 <h2>Heading</h2>
 <p class="eq">Donec id elit non mi porta gravida at eget metus.</p>
 <p><a class="btn btn-primary" href="#">View details &raquo;</a></p>
 </div>
 <div class="someclass">
 <h2>Heading</h2>
 <p class="eq">Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui. </p>
 <p><a class="btn btn-primary" href="#">View details &raquo;</a></p>
 </div>
 <div class="someclass">
 <h2>Heading</h2>
 <p>Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui. </p>
 <p><a class="btn btn-primary" href="#">View details &raquo;</a></p>
 </div>
 </div>

 Other attributes
 data-eqdisable="[0;768)&[992;1200)" - disable equal height behaviour in this screen widths
 data-delay="500" - eqHeight trying to use debounce rate-limit function with delay=250ms. Via this parameter you can set another delay
 data-subtargets='h2;.eq' - sets each h2 in row and each.eq same height (groups of different heqights elements shuold be devided by ;)

 Via JavaScript
 $('.some-parent-block').eqHeight({
 eqdisable: '[0;768)&[992;1200)',
 target: '.someclass p.eq',
 delay: '500',
 data-subtargets: 'h2;.eq'
 });

 Methods
 .eqHeight('refresh') - manual refresh of targets height.
 */


(function () {
    var eqHeight, old;

    eqHeight = (function () {
        function eqHeight(element, options) {
            var thisProxy;
            this.element = $(element);
            this.options = $.extend({}, eqHeight.DEFAULTS, options);
            this.options.delay = parseInt(this.options.delay);
            this.options.subtargets = this.options.subtargets.split(';');
            if (this.options.subtargets.length === 1 && this.options.subtargets[0] === '') {
                this.options.subtargets = [];
            }
            thisProxy = $.proxy(this.refresh, this);
            if ($.debounce != null) {
                $(window).on('resize', $.debounce(this.options.delay, thisProxy));
            } else {
                $(window).on('resize', thisProxy);
            }
            this.refresh();
        }

        eqHeight.prototype._disabled = function () {
            var clientWidth, d, dims, disabled, _i, _len;
            disabled = false;
            if (this.options.eqdisable !== "") {
                clientWidth = document.body.clientWidth;
                dims = this.options.eqdisable.split('&');
                for (_i = 0, _len = dims.length; _i < _len; _i++) {
                    d = dims[_i];
                    disabled = disabled || this._inInterval(clientWidth, d);
                }
            }
            return disabled;
        };

        eqHeight.prototype._setHeight = function (row) {
            var iHeight, item, maxHeight, _i, _j, _len, _len1;
            maxHeight = 0;
            for (_i = 0, _len = row.length; _i < _len; _i++) {
                item = row[_i];
                iHeight = item.height();
                if (iHeight > maxHeight) {
                    maxHeight = iHeight;
                }
            }
            for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
                item = row[_j];
                item.height(maxHeight);
            }
            return maxHeight;
        };

        eqHeight.prototype._setHeightSubtargets = function (row) {
            var rowItem, subItem, subRow, subtarget, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
            if (this.options.subtargets.length > 0 && row.length > 0) {
                _ref = this.options.subtargets;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    subtarget = _ref[_i];
                    subRow = [];
                    for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
                        rowItem = row[_j];
                        _ref1 = rowItem.find(subtarget);
                        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                            subItem = _ref1[_k];
                            subRow.push($(subItem));
                        }
                    }
                    this._setHeight(subRow);
                }
                return true;
            } else {
                return false;
            }
        };

        eqHeight.prototype.refresh = function () {
            var currentTop, iTop, item, items, row, subtarget, _i, _j, _len, _len1, _ref;
            if (this.options.target != null) {
                items = this.element.find(this.options.target);
            } else {
                items = $(this.element).children();
            }
            items.height('auto');
            if (this.options.subtargets.length > 0) {
                _ref = this.options.subtargets;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    subtarget = _ref[_i];
                    items.find(subtarget).height('auto');
                }
            }
            if (this._disabled()) {
                return false;
            }
            row = [];
            currentTop = 0;
            for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
                item = items[_j];
                item = $(item);
                iTop = item.offset().top;
                if (iTop !== currentTop) {
                    this._setHeightSubtargets(row);
                    this._setHeight(row);
                    row = [];
                    currentTop = item.offset().top;
                }
                row.push(item);
            }
            this._setHeightSubtargets(row);
            return this._setHeight(row);
        };

        eqHeight.prototype._inInterval = function (val, interval) {
            var dx1, dx1i, dx1t, dx2, dx2i, dx2t, _ref, _ref1, _ref2, _ref3;
            if (interval.length === 0) {
                return false;
            }
            _ref = interval.split(';'), dx1 = _ref[0], dx2 = _ref[1];
            _ref1 = [parseInt(dx1.slice(1)), parseInt(dx2.slice(0, dx2.length - 1))], dx1i = _ref1[0], dx2i = _ref1[1];
            _ref2 = [dx1[0] === '[', dx2[dx2.length - 1] === '['], dx1t = _ref2[0], dx2t = _ref2[1];
            if (dx1i > dx2i) {
                _ref3 = [dx2i, dx1i, dx2t, dx1t], dx1i = _ref3[0], dx2i = _ref3[1], dx1t = _ref3[2], dx2t = _ref3[3];
            }
            return (dx1i < val && val < dx2i) || (dx1t && dx1i === val) || (dx2t && dx2i === val);
        };

        return eqHeight;

    })();

    eqHeight.DEFAULTS = {
        target: null,
        eqdisable: '',
        delay: 250,
        subtargets: ''
    };

    old = $.fn.eqHeight;

    $.fn.eqHeight = function (option) {
        var data, i, options, self, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = this.length; _i < _len; _i++) {
            i = this[_i];
            self = $(i);
            options = typeof option === 'object' && option;
            if (typeof option === 'string') {
                _results.push((function () {
                    var _results1;
                    _results1 = [];
                    for (i in self.data()) {
                        if (i.indexOf('iv.eqheight') === 0) {
                            data = self.data(i);
                            _results1.push(data[option]());
                        } else {
                            _results1.push(void 0);
                        }
                    }
                    return _results1;
                })());
            } else {
                data = self.data('iv.eqheight');
                if (!data) {
                    _results.push(self.data('iv.eqheight', (data = new eqHeight(this, options))));
                } else {
                    _results.push(void 0);
                }
            }
        }
        return _results;
    };

    $.fn.eqHeight.Constructor = eqHeight;

    $.fn.eqHeight.noConflict = function () {
        $.fn.eqHeight = old;
        return this;
    };

    $(window).on('load', function () {
        var i, self, _i, _len, _ref, _results;
        _ref = $('[data-height="equal"]');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            self = $(i);
            _results.push($(self).eqHeight(self.data()));
        }
        return _results;
    });

}).call(this);
